import streamlit as st
from pathlib import Path
from core.env_loader import load_env, get_key_info, validate_key_format, set_runtime_key, write_dotenv_key, reset_caches_and_rerun
from core.project_io import DATA_DIR, save_project, load_project, export_zip

def render_sidebar():
    st.sidebar.title("‚öôÔ∏è C·∫•u h√¨nh")

    # ============ üîê API Key Manager ============
    with st.sidebar.expander("üîê API Key (GEMINI_API_KEY)", expanded=True):
        current_key = load_env()
        st.caption(f"Hi·ªán t·∫°i: {get_key_info(current_key)}")

        new_key = st.text_input(
            "Nh·∫≠p key m·ªõi (kh√¥ng l∆∞u n·∫øu ch∆∞a b·∫•m n√∫t b√™n d∆∞·ªõi)",
            type="password",
            placeholder="d√°n GEMINI_API_KEY v√†o ƒë√¢y‚Ä¶",
            key="api_key_entry_sidebar",
        )

        colK1, colK2 = st.columns(2)
        with colK1:
            if st.button("‚ö° D√πng t·∫°m th·ªùi (runtime)"):
                if not validate_key_format(new_key):
                    st.warning("Key tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá.")
                else:
                    set_runtime_key(new_key)
                    st.success("ƒê√£ ghi ƒë√® key t·∫°m th·ªùi cho phi√™n hi·ªán t·∫°i.")
                    reset_caches_and_rerun()
        with colK2:
            if st.button("üíæ Ghi v√†o .env"):
                if not validate_key_format(new_key):
                    st.warning("Key tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá.")
                else:
                    ok = write_dotenv_key(new_key)
                    if ok:
                        st.success("ƒê√£ ghi key v√†o .env v√† √°p d·ª•ng ngay.")
                        reset_caches_and_rerun()
                    else:
                        st.error("Kh√¥ng ghi ƒë∆∞·ª£c .env. Ki·ªÉm tra quy·ªÅn ghi file.")

        colR1, colR2 = st.columns(2)
        with colR1:
            if st.button("üîÑ Reload .env"):
                # ch·ªâ reload .env v√† rerun
                reset_caches_and_rerun()
        with colR2:
            if st.button("üßΩ Xo√° override (d√πng l·∫°i .env)"):
                # Xo√° m·ªçi override runtime ƒë·ªÉ quay v·ªÅ .env: c√°ch ƒë∆°n gi·∫£n l√† x√≥a bi·∫øn env hi·ªán t·∫°i
                # r·ªìi reload .env ·ªü v√≤ng render k·∫ø ti·∫øp.
                for var in ("GEMINI_API_KEY", "GOOGLE_API_KEY"):
                    if var in st.session_state:
                        del st.session_state[var]
                try:
                    import os
                    if "GEMINI_API_KEY" in os.environ: del os.environ["GEMINI_API_KEY"]
                    if "GOOGLE_API_KEY" in os.environ: del os.environ["GOOGLE_API_KEY"]
                except Exception:
                    pass
                st.info("ƒê√£ xo√° override. App s·∫Ω t·∫£i l·∫°i key t·ª´ .env.")
                reset_caches_and_rerun()
    # ============ /API Key Manager ============

    model_name = st.sidebar.selectbox("Model", ["gemini-2.5-pro", "gemini-2.5-flash"])
    custom_model = st.sidebar.text_input("Model tu·ª≥ ch·ªçn", value="", help="V√≠ d·ª•: gemini-2.5-flash")
    model_name = custom_model or model_name

    use_tts = st.sidebar.toggle("B·∫≠t TTS (gTTS)", value=False, help="T·∫°o file MP3 cho tab TTS")

    st.sidebar.markdown("---")
    st.sidebar.subheader("üìÅ D·ª± √°n")
    proj_files = sorted(DATA_DIR.glob("*.json"))
    if proj_files:
        sel_file = st.sidebar.selectbox("M·ªü project", ["(Ch·ªçn)"] + [f.name for f in proj_files])
        if sel_file != "(Ch·ªçn)":
            st.session_state.project = load_project(DATA_DIR / sel_file)
            st.sidebar.success(f"ƒê√£ m·ªü {sel_file}")

    if st.sidebar.button("üíæ L∆∞u project", type="primary"):
        if st.session_state.project:
            f = save_project(st.session_state.project)
            st.sidebar.success(f"ƒê√£ l∆∞u: {f.name}")
        else:
            st.sidebar.warning("Ch∆∞a c√≥ project")

    if st.sidebar.button("üì¶ Export ZIP"):
        if st.session_state.project:
            zbytes = export_zip(st.session_state.project)
            st.sidebar.download_button("T·∫£i xu·ªëng project.zip", data=zbytes, file_name="project.zip")
        else:
            st.sidebar.warning("Ch∆∞a c√≥ project")

    # Debug (·∫©n key)
    current_key2 = load_env()
    if current_key2:
        st.sidebar.caption(f"[DEBUG] {get_key_info(current_key2)}")
    else:
        st.sidebar.error("Ch∆∞a th·∫•y GEMINI_API_KEY trong .env.")

    return model_name, use_tts

import json
import streamlit as st
from core.data_models import Project, Episode
from core.prompt_builders import build_episode_prompt
from core.gemini_helpers import gemini_json
from core.project_io import save_project
from core.text_utils import (
    clean_tts_text, parse_tts_lines, extract_characters,
    suggest_styles, _safe_name
)
from core.character_bible import ai_generate_character_bible, seed_from_text
from core.veo31_helpers import build_veo31_segments_prompt

# --- Optional TTS deps ---
try:
    from gtts import gTTS
except Exception:
    gTTS = None

try:
    from pydub import AudioSegment
except Exception:
    AudioSegment = None


def _sanitize_multiselect_options(options, default_list):
    """
    ƒê·∫£m b·∫£o gi√° tr·ªã default ‚äÜ options ƒë·ªÉ tr√°nh StreamlitAPIException.
    N·∫øu default c√≥ ph·∫ßn t·ª≠ ch∆∞a n·∫±m trong options => g·ªôp r·ªìi ƒë∆∞a default l√™n ƒë·∫ßu.
    """
    options = list(options or [])
    default_list = list(default_list or [])
    base_set = set([x for x in options if x])
    extra = [x for x in default_list if x and x not in base_set]
    merged = options + extra
    seen, merged_unique = set(), []
    for x in merged:
        if x and x not in seen:
            merged_unique.append(x)
            seen.add(x)
    default_sanitized = [x for x in default_list if x in merged_unique]
    rest = [x for x in merged_unique if x not in default_sanitized]
    rest_sorted = sorted(rest, key=lambda s: s.lower())
    options_sanitized = default_sanitized + rest_sorted
    return options_sanitized, default_sanitized


# -------- Character Bible UI helpers (STATE + quick view) --------
def _ensure_cb_state(proj):
    """
    Gi·ªØ m·ªôt b·∫£n text JSON trong session ƒë·ªÉ text_area lu√¥n hi·ªÉn th·ªã ƒë√∫ng
    khi v·ª´a seed/generate v√† ch√∫ng ta ch·ªß ƒë·ªông rerun.
    """
    if "cb_text_value" not in st.session_state:
        st.session_state.cb_text_value = json.dumps(
            proj.character_bible, ensure_ascii=False, indent=2
        )


def _render_cb_table(cb: dict):
    """
    Hi·ªÉn th·ªã nhanh danh s√°ch nh√¢n v·∫≠t ƒë·ªÉ ng∆∞·ªùi d√πng th·∫•y "ƒë√£ t·∫°o/seed" ngay.
    """
    chars = cb.get("characters", [])
    if not chars:
        st.info("Character Bible hi·ªán ch∆∞a c√≥ nh√¢n v·∫≠t.")
        return
    st.write(f"ƒê√£ c√≥ **{len(chars)}** nh√¢n v·∫≠t:")
    for i, c in enumerate(chars, 1):
        name = c.get("name", "?")
        role = c.get("role", "")
        age = c.get("age", "")
        look = c.get("look", "")
        st.markdown(f"- **{i}. {name}** ‚Äî {role}, {age}. *{(look or '')[:120]}*")


# ------------------ Main Section 3 ------------------
def render_section_3(model, use_tts: bool):
    st.header("3) Vi·∫øt n·ªôi dung cho t·ª´ng t·∫≠p ‚Äî theo M√πa ƒëang ch·ªçn")

    proj: Project | None = st.session_state.project
    if not proj or not proj.seasons:
        st.info("Ch∆∞a c√≥ M√πa/Outline. V√†o b∆∞·ªõc 2 tr∆∞·ªõc nh√©.")
        return

    sidx = st.session_state.current_season_idx
    cur_season = proj.seasons[sidx]
    if not cur_season.outline:
        st.info("M√πa hi·ªán t·∫°i ch∆∞a c√≥ d√†n b√†i. H√£y t·∫°o ·ªü b∆∞·ªõc 2.")
        return

    # Warn n·∫øu thi·∫øu model
    if model is None:
        st.warning("‚ö†Ô∏è Ch∆∞a kh·ªüi t·∫°o model (ki·ªÉm tra GEMINI_API_KEY ·ªü Sidebar). M·ªôt s·ªë n√∫t AI s·∫Ω b·ªã v√¥ hi·ªáu.")

    # B·∫£o ƒë·∫£m c√≥ state cho CB JSON text
    _ensure_cb_state(proj)

    # ==== VE0 & Character Bible options (ƒë·∫∑t tr∆∞·ªõc) ====
    with st.expander("üìå Tu·ª≥ ch·ªçn n√¢ng cao (Veo & Nh√¢n v·∫≠t)"):
        colx, coly = st.columns(2)
        with colx:
            proj.aspect_ratio = st.selectbox(
                "T·ªâ l·ªá khung h√¨nh m·∫∑c ƒë·ªãnh (Veo)", ["16:9", "9:16"],
                index=(0 if proj.aspect_ratio == "16:9" else 1)
            )
        with coly:
            proj.donghua_style = st.toggle(
                "∆Øu ti√™n phong c√°ch ho·∫°t h√¨nh Trung Qu·ªëc (donghua)",
                value=proj.donghua_style
            )

        # Character Bible JSON ‚Äì d√πng session_state.cb_text_value
        st.caption("**Character Bible** ‚Äî m√¥ t·∫£ nh√¢n v·∫≠t (JSON).")
        cb_text = st.text_area(
            "Character Bible (JSON)",
            height=220,
            value=st.session_state.cb_text_value,
            key="cb_text_area"
        )
        try:
            cb_parsed = json.loads(cb_text) if cb_text.strip() else {"characters": []}
            if "characters" not in cb_parsed:
                cb_parsed = {"characters": []}
        except Exception:
            cb_parsed = proj.character_bible
            st.warning("JSON Character Bible kh√¥ng h·ª£p l·ªá. Gi·ªØ gi√° tr·ªã c≈©.")

        # 3 n√∫t: Generate / Seed / Save
        col_cb1, col_cb2, col_cb3 = st.columns(3)
        with col_cb1:
            if st.button("ü™Ñ T·∫°o Character Bible (AI)"):
                if not model:
                    st.warning("Ch∆∞a kh·ªüi t·∫°o model.")
                else:
                    some_outline = cur_season.outline if cur_season.outline else None
                    data_cb = ai_generate_character_bible(
                        model, proj.name, proj.idea, proj.chosen_storyline, some_outline, 6
                    )
                    if isinstance(data_cb, dict) and data_cb.get("characters"):
                        proj.character_bible = data_cb
                        # Sync state & rerun ƒë·ªÉ th·∫•y ngay trong text_area
                        st.session_state.cb_text_value = json.dumps(
                            data_cb, ensure_ascii=False, indent=2
                        )
                        save_project(proj)
                        st.success(f"ƒê√£ t·∫°o Character Bible ({len(data_cb['characters'])} nh√¢n v·∫≠t).")
                        st.rerun()
                    else:
                        st.error("Model kh√¥ng tr·∫£ JSON h·ª£p l·ªá.")

        with col_cb2:
            if st.button("‚ú® Seed nh√¢n v·∫≠t t·ª´ TTS/Script (t·∫≠p ƒëang ch·ªçn)"):
                # C·ªë l·∫•y index t·ª´ selectbox (·ªü d∆∞·ªõi). N·∫øu ch∆∞a c√≥, fallback = 0.
                ep_select_key = f"ep_select_s{sidx}"
                def_ep_idx = 0
                if st.session_state.get(ep_select_key):
                    try:
                        def_ep_idx = int(str(st.session_state.get(ep_select_key)).split()[1]) - 1
                    except Exception:
                        def_ep_idx = 0

                if not cur_season.episodes:
                    st.warning("Ch∆∞a c√≥ t·∫≠p n√†o ƒë·ªÉ seed.")
                else:
                    ep_for_seed = cur_season.episodes[max(0, min(def_ep_idx, len(cur_season.episodes) - 1))]
                    seed_text = ep_for_seed.tts_text or ep_for_seed.script_text
                    if not (seed_text or "").strip():
                        st.warning("T·∫≠p hi·ªán t·∫°i ch∆∞a c√≥ TTS/Script ƒë·ªÉ seed.")
                    else:
                        new_cb = seed_from_text(cb_parsed, seed_text)
                        proj.character_bible = new_cb
                        # Sync state & rerun
                        st.session_state.cb_text_value = json.dumps(
                            new_cb, ensure_ascii=False, indent=2
                        )
                        save_project(proj)
                        st.success("ƒê√£ seed t√™n nh√¢n v·∫≠t t·ª´ TTS/Script.")
                        st.rerun()

        with col_cb3:
            if st.button("üíæ L∆∞u Character Bible"):
                proj.character_bible = cb_parsed
                st.session_state.cb_text_value = json.dumps(
                    cb_parsed, ensure_ascii=False, indent=2
                )
                save_project(proj)
                st.success("ƒê√£ l∆∞u Character Bible.")

        # B·∫£ng t√≥m t·∫Øt nh√¢n v·∫≠t ngay d∆∞·ªõi c√°c n√∫t
        _render_cb_table(proj.character_bible)

        # C·∫≠p nh·∫≠t l·∫°i v√†o session
        st.session_state.project = proj

    # ==== Ch·ªçn t·∫≠p ====
    ep_indices = [f"T·∫≠p {ep.index:02d}" for ep in cur_season.episodes]
    ep_label = st.selectbox(
        "Ch·ªçn t·∫≠p ƒë·ªÉ vi·∫øt / ch·ªânh s·ª≠a", ep_indices, key=f"ep_select_s{sidx}"
    )
    ep_idx = int(ep_label.split()[1]) - 1
    ep: Episode = cur_season.episodes[ep_idx]

    # ==== Vi·∫øt t·∫≠p / L∆∞u ====
    col1, col2 = st.columns(2)
    with col1:
        if st.button(
            "‚úçÔ∏è Sinh n·ªôi dung t·∫≠p (FULL/ASSETS/TTS)",
            disabled=not bool(model),
            key=f"write_ep_s{sidx}_{ep_idx}"
        ):
            with st.spinner("ƒêang vi·∫øt t·∫≠p..."):
                prompt = build_episode_prompt(proj.chosen_storyline, ep.title, ep.summary)
                data = gemini_json(model, prompt)
                if isinstance(data, dict):
                    ep.script_text = (
                        data.get("FULL_SCRIPT")
                        or data.get("full_script")
                        or json.dumps(data, ensure_ascii=False)
                    )
                    assets = data.get("ASSETS") or data.get("assets") or []
                    tts_txt = data.get("TTS") or data.get("tts") or ""
                else:
                    ep.script_text = str(data)
                    assets = []
                    tts_txt = ""
                if isinstance(assets, list):
                    ep.assets = {"scenes": assets}
                elif isinstance(assets, dict):
                    ep.assets = assets
                else:
                    ep.assets = {"scenes": []}
                ep.tts_text = tts_txt or ep.script_text
                cur_season.episodes[ep_idx] = ep
                proj.seasons[sidx] = cur_season
                save_project(proj)
                st.success("ƒê√£ sinh n·ªôi dung t·∫≠p.")
    with col2:
        if st.button("üíæ L∆∞u t·∫≠p hi·ªán t·∫°i", key=f"save_ep_s{sidx}_{ep_idx}"):
            cur_season.episodes[ep_idx] = ep
            proj.seasons[sidx] = cur_season
            save_project(proj)
            st.success("ƒê√£ l∆∞u.")

    # ==== Tabs ====
    tabs = st.tabs(["üìñ Truy·ªán", "üñºÔ∏èüéöÔ∏è Prompts ·∫¢nh & √Çm Thanh", "üó£Ô∏è TTS & MP3"])

    # Tab 1: Script
    with tabs[0]:
        ep.script_text = st.text_area(
            "N·ªôi dung truy·ªán (c√≥ th·ªÉ ch·ªânh tay)",
            value=ep.script_text, height=500, key=f"script_{sidx}_{ep_idx}"
        )
        st.caption("Tip: Gi·ªØ phong c√°ch audio-first, ph√¢n c·∫£nh r√µ, c√≥ tho·∫°i H·ªá Th·ªëng.")

    # Tab 2: Assets & Veo 3.1
    with tabs[1]:
        scenes = ep.assets.get("scenes", [])
        new_scenes = []

        st.markdown("#### üé¨ Veo 3.1 ‚Äî T·∫°o video prompts (m·ªói clip 8s)")
        col_veo_a, col_veo_b = st.columns(2)
        with col_veo_a:
            ar_local = st.selectbox(
                "T·ªâ l·ªá khung cho t·∫≠p n√†y", ["16:9", "9:16"],
                index=(0 if proj.aspect_ratio == "16:9" else 1),
                key=f"ar_ep_{sidx}_{ep.index}"
            )
        with col_veo_b:
            donghua_local = st.toggle(
                "Phong c√°ch ho·∫°t h√¨nh Trung Qu·ªëc (donghua) cho t·∫≠p",
                value=proj.donghua_style, key=f"donghua_ep_{sidx}_{ep.index}"
            )

        char_names_all = [
            c.get("name", "")
            for c in (proj.character_bible.get("characters", []) if proj else [])
        ]
        char_names_all = [x for x in char_names_all if x]

        max_segments_all = st.number_input(
            "S·ªë clip 8s t·ªëi ƒëa / c·∫£nh", min_value=1, max_value=6, value=3, step=1,
            key=f"veo_maxseg_all_{ep.index}"
        )
        if st.button(
            "‚ö° Sinh Veo 3.1 cho T·∫§T C·∫¢ c·∫£nh",
            disabled=not bool(model), key=f"veo_all_{ep.index}"
        ):
            if not scenes:
                st.warning("Ch∆∞a c√≥ scene ƒë·ªÉ sinh Veo.")
            else:
                with st.spinner("ƒêang sinh prompts Veo 3.1 cho t·∫•t c·∫£ c·∫£nh‚Ä¶"):
                    new_scenes_all = []
                    for i, sc in enumerate(scenes, 1):
                        sc_name = sc.get("scene", f"C·∫£nh {i}")
                        scene_text = sc.get("image_prompt", "") or sc.get("sfx_prompt", "") or ep.summary
                        char_in_scene = sc.get("characters", [])
                        opts_scene, default_scene = _sanitize_multiselect_options(char_names_all, char_in_scene)

                        pv = build_veo31_segments_prompt(
                            ep.title, sc_name, scene_text,
                            max_segments=max_segments_all, aspect_ratio=ar_local,
                            donghua_style=bool(donghua_local),
                            character_bible=proj.character_bible,
                            characters_in_scene=default_scene
                        )
                        veo_data = gemini_json(model, pv)
                        if isinstance(veo_data, dict) and "segments" in veo_data:
                            sc["veo31"] = veo_data
                        else:
                            sc["veo31"] = {
                                "scene": sc_name,
                                "segments": [{
                                    "title": "M·ªôt shot 8s",
                                    "duration_sec": 8,
                                    "characters": default_scene,
                                    "veo_prompt": scene_text[:400] + f" | stylized, 24fps, {ar_local}",
                                    "sfx": "ambience ph√π h·ª£p b·ªëi c·∫£nh",
                                    "notes": "fallback"
                                }]
                            }
                        new_scenes_all.append(sc)

                    ep.assets["scenes"] = new_scenes_all
                    cur_season.episodes[ep_idx] = ep
                    proj.seasons[sidx] = cur_season
                    save_project(proj)
                    st.success("ƒê√£ sinh Veo 3.1 cho to√†n b·ªô c·∫£nh.")

        if not scenes:
            st.info("Ch∆∞a c√≥ scene. H√£y nh·∫•n 'Sinh n·ªôi dung t·∫≠p' tr∆∞·ªõc ho·∫∑c t·ª± th√™m.")

        for i, sc in enumerate(scenes, 1):
            with st.expander(f"C·∫£nh {i}: {sc.get('scene','(ch∆∞a c√≥ t√™n)')}"):
                scene_name = st.text_input(
                    f"T√™n c·∫£nh {i}", value=sc.get("scene", f"C·∫£nh {i}"),
                    key=f"scene_name_{sidx}_{ep.index}_{i}"
                )
                imgp = st.text_area(
                    f"Image Prompt {i}", value=sc.get("image_prompt", ""),
                    key=f"imgp_{sidx}_{ep.index}_{i}"
                )
                sfxp = st.text_area(
                    f"SFX Prompt {i}", value=sc.get("sfx_prompt", ""),
                    key=f"sfxp_{sidx}_{ep.index}_{i}"
                )

                # Nh√¢n v·∫≠t theo c·∫£nh
                scene_defaults = sc.get("characters", [])
                opts_scene, default_scene = _sanitize_multiselect_options(char_names_all, scene_defaults)
                picked = st.multiselect(
                    f"Nh√¢n v·∫≠t xu·∫•t hi·ªán (C·∫£nh {i})",
                    options=opts_scene, default=default_scene,
                    key=f"chars_scene_{sidx}_{ep.index}_{i}"
                )
                sc["characters"] = picked

                # Veo per scene
                st.markdown("**üé¨ Veo 3.1 (m·ªói clip t·ªëi ƒëa 8s)**")
                max_segments = st.number_input(
                    f"S·ªë clip 8s t·ªëi ƒëa (C·∫£nh {i})",
                    min_value=1, max_value=6, value=3, step=1,
                    key=f"veo_maxseg_{sidx}_{ep.index}_{i}"
                )
                if st.button(
                    f"‚ö° Sinh Veo cho C·∫£nh {i}",
                    disabled=not bool(model),
                    key=f"veo_one_{sidx}_{ep.index}_{i}"
                ):
                    with st.spinner(f"ƒêang sinh Veo 3.1 cho C·∫£nh {i}‚Ä¶"):
                        src_text = imgp or sfxp or ep.summary
                        pv = build_veo31_segments_prompt(
                            ep.title, scene_name, src_text,
                            max_segments=max_segments, aspect_ratio=ar_local,
                            donghua_style=bool(donghua_local),
                            character_bible=proj.character_bible,
                            characters_in_scene=picked
                        )
                        veo_data = gemini_json(model, pv)
                        if isinstance(veo_data, dict) and "segments" in veo_data:
                            sc["veo31"] = veo_data
                        else:
                            sc["veo31"] = {
                                "scene": scene_name,
                                "segments": [{
                                    "title": "M·ªôt shot 8s",
                                    "duration_sec": 8,
                                    "characters": picked,
                                    "veo_prompt": (src_text[:400] + f" | stylized, 24fps, {ar_local}"),
                                    "sfx": "ambience ph√π h·ª£p b·ªëi c·∫£nh",
                                    "notes": "fallback"
                                }]
                            }
                        st.success(f"ƒê√£ sinh Veo 3.1 cho C·∫£nh {i}.")

                # Hi·ªÉn th·ªã c√°c segment 8s ƒë√£ g·ª£i √Ω
                veo_obj = sc.get("veo31", {})
                segments = veo_obj.get("segments", [])
                if segments:
                    st.caption("C√°c clip 8s ƒë√£ g·ª£i √Ω:")
                    merged_prompts = []
                    for si, seg in enumerate(segments, 1):
                        with st.expander(f"Clip {si}: {seg.get('title','(ch∆∞a c√≥)')} ‚Äî {seg.get('duration_sec',8)}s", expanded=False):
                            seg["title"] = st.text_input(
                                f"Ti√™u ƒë·ªÅ clip {si}",
                                value=seg.get("title", ""),
                                key=f"veo_title_{sidx}_{ep.index}_{i}_{si}"
                            )
                            seg["duration_sec"] = st.number_input(
                                f"Th·ªùi l∆∞·ª£ng clip {si} (<=8s)", min_value=1, max_value=8,
                                value=int(seg.get("duration_sec", 8)),
                                key=f"veo_dur_{sidx}_{ep.index}_{i}_{si}"
                            )
                            seg_chars = seg.get("characters", sc.get("characters", []))
                            opts_seg, default_seg = _sanitize_multiselect_options(char_names_all, seg_chars)
                            seg["characters"] = st.multiselect(
                                f"Nh√¢n v·∫≠t (clip {si})",
                                options=opts_seg, default=default_seg,
                                key=f"veo_chars_{sidx}_{ep.index}_{i}_{si}"
                            )
                            seg["veo_prompt"] = st.text_area(
                                f"Veo prompt {si}",
                                value=seg.get("veo_prompt", ""),
                                height=160,
                                key=f"veo_prompt_{sidx}_{ep.index}_{i}_{si}"
                            )
                            seg["sfx"] = st.text_area(
                                f"SFX/ambience {si}",
                                value=seg.get("sfx", ""),
                                height=80,
                                key=f"veo_sfx_{sidx}_{ep.index}_{i}_{si}"
                            )
                            seg["notes"] = st.text_area(
                                f"Ghi ch√∫ {si}",
                                value=seg.get("notes", ""),
                                height=60,
                                key=f"veo_notes_{sidx}_{ep.index}_{i}_{si}"
                            )

                        merged_prompts.append(
                            f"# {scene_name} ‚Äî Clip {si} ({seg.get('duration_sec',8)}s)\n"
                            f"[Characters] {', '.join(seg.get('characters', []))}\n"
                            f"{seg.get('veo_prompt','')}\n[SFX] {seg.get('sfx','')}"
                        )

                    sc["veo31"] = {"scene": scene_name, "segments": segments}
                    st.text_area(
                        "üìã Copy-all Veo prompts (c·∫£nh n√†y)",
                        value="\n\n---\n".join(merged_prompts),
                        height=200, key=f"veo_copy_{sidx}_{ep.index}_{i}"
                    )

                new_scenes.append({
                    "scene": scene_name,
                    "image_prompt": imgp,
                    "sfx_prompt": sfxp,
                    **({"characters": sc.get("characters")} if sc.get("characters") else {}),
                    **({"veo31": sc.get("veo31")} if sc.get("veo31") else {})
                })

        c1, c2 = st.columns(2)
        with c1:
            if st.button("‚ûï Th√™m c·∫£nh tr·ªëng", key=f"add_scene_{sidx}_{ep_idx}"):
                new_scenes.append({
                    "scene": f"C·∫£nh {len(new_scenes)+1}",
                    "image_prompt": "",
                    "sfx_prompt": ""
                })
        with c2:
            if st.button("üíæ L∆∞u Prompts c·∫£nh", key=f"save_scenes_{sidx}_{ep_idx}"):
                ep.assets["scenes"] = new_scenes
                cur_season.episodes[ep_idx] = ep
                proj.seasons[sidx] = cur_season
                save_project(proj)
                st.success("ƒê√£ l∆∞u danh s√°ch c·∫£nh.")
        if new_scenes:
            ep.assets["scenes"] = new_scenes

        st.json(ep.assets)

    # Tab 3: TTS
    with tabs[2]:
        st.caption("Tr∆∞·ªõc khi ƒë·ªçc TTS, h·ªá th·ªëng s·∫Ω l·ªçc b·ªè **, SFX, heading‚Ä¶ v√† t√°ch tho·∫°i nh√¢n v·∫≠t.")
        raw = st.text_area(
            "VƒÉn b·∫£n ƒë·∫ßu v√†o TTS (c√≥ th·ªÉ kh√°c v·ªõi Truy·ªán)",
            value=ep.tts_text or ep.script_text, height=260,
            key=f"tts_raw_{sidx}_{ep_idx}"
        )
        cleaned = clean_tts_text(raw)
        if st.toggle("Hi·ªÉn th·ªã vƒÉn b·∫£n ƒë√£ l√†m s·∫°ch", key=f"show_clean_{sidx}_{ep_idx}"):
            st.text_area("ƒê√£ l√†m s·∫°ch", value=cleaned, height=160, key=f"tts_clean_{sidx}_{ep_idx}")

        if st.button("üîé Ph√¢n t√≠ch tho·∫°i & Nh√¢n v·∫≠t", key=f"parse_tts_{sidx}_{ep_idx}"):
            st.session_state.parsed_tts = parse_tts_lines(cleaned)
            st.success(f"ƒê√£ t√°ch {len(st.session_state.parsed_tts)} d√≤ng.")

        parsed = st.session_state.get("parsed_tts", [])
        if parsed:
            chars = extract_characters(parsed)
            st.write("**Nh√¢n v·∫≠t ph√°t hi·ªán:**", ", ".join(chars) if chars else "(Ch·ªâ c√≥ Ng∆∞·ªùi D·∫´n Chuy·ªán)")
            style_suggest = suggest_styles(chars)

            if "tts_voices" not in st.session_state:
                st.session_state.tts_voices = {"Ng∆∞·ªùi D·∫´n Chuy·ªán": {"voice": "default", "style": "K·ªÉ ch·∫≠m r√£i, ·∫•m"}}
            cfg = st.session_state.tts_voices

            with st.expander("Ng∆∞·ªùi D·∫´n Chuy·ªán"):
                cfg.setdefault("Ng∆∞·ªùi D·∫´n Chuy·ªán", {"voice": "default", "style": "K·ªÉ ch·∫≠m r√£i, ·∫•m"})
                cfg["Ng∆∞·ªùi D·∫´n Chuy·ªán"]["voice"] = st.selectbox(
                    "Gi·ªçng", ["default", "female_soft", "male_deep"], index=0,
                    key=f"nar_voice_{sidx}_{ep_idx}"
                )
                cfg["Ng∆∞·ªùi D·∫´n Chuy·ªán"]["style"] = st.text_input(
                    "Gi·ªçng ƒëi·ªáu", value=cfg["Ng∆∞·ªùi D·∫´n Chuy·ªán"].get("style", "K·ªÉ ch·∫≠m r√£i, ·∫•m"),
                    key=f"nar_style_{sidx}_{ep_idx}"
                )

            for ch in chars:
                with st.expander(ch):
                    default_style = style_suggest.get(ch, "Trung t√≠nh")
                    cur = cfg.get(ch, {
                        "voice": ("female_soft" if "N·ªØ" in ch else ("robotic" if ch == "H·ªÜ TH·ªêNG" else "male_deep")),
                        "style": default_style
                    })
                    cfg[ch] = cur
                    options = ["female_soft", "male_deep", "robotic", "youth_bright", "mature_calm"]
                    idx_opt = options.index(cur["voice"]) if cur["voice"] in options else 0
                    cfg[ch]["voice"] = st.selectbox(
                        "Gi·ªçng", options, index=idx_opt, key=f"voice_{sidx}_{ep_idx}_{ch}"
                    )
                    cfg[ch]["style"] = st.text_input(
                        "Gi·ªçng ƒëi·ªáu", value=cur.get("style", default_style), key=f"style_{sidx}_{ep_idx}_{ch}"
                    )

            st.info("gTTS ch·ªâ 1 gi·ªçng. ƒê·ªÉ ƒëa gi·ªçng th·ª±c s·ª±, d√πng ElevenLabs/Azure + pydub.")

            colr1, colr2 = st.columns(2)
            with colr1:
                if use_tts and st.button("üéôÔ∏è Render MP3", key=f"render_tts_{sidx}_{ep_idx}"):
                    with st.spinner("ƒêang render TTS‚Ä¶"):
                        if gTTS is None:
                            st.error("gTTS ch∆∞a ƒë∆∞·ª£c c√†i. pip install gtts")
                        else:
                            merged_text = " ".join([it["text"] for it in parsed])
                            if not merged_text.strip():
                                st.warning("Kh√¥ng c√≥ vƒÉn b·∫£n ƒë·ªÉ ƒë·ªçc.")
                            else:
                                from pathlib import Path
                                out_path = (
                                    Path(__file__).resolve().parents[1]
                                    / "projects"
                                    / f"{_safe_name(proj.name)}_S{sidx+1:02d}_E{ep.index:02d}.mp3"
                                )
                                gTTS(text=merged_text, lang="vi").save(str(out_path))
                                st.audio(str(out_path))
                                st.success(f"ƒê√£ xu·∫•t: {out_path.name}")

            with colr2:
                if AudioSegment is None:
                    st.caption("(Tu·ª≥ ch·ªçn) C√†i pydub + ffmpeg ƒë·ªÉ gh√©p ph√¢n ƒëo·∫°n ƒëa gi·ªçng.")
                else:
                    st.caption("pydub ƒë√£ s·∫µn s√†ng.")

    # apply back
    cur_season.episodes[ep_idx] = ep
    proj.seasons[sidx] = cur_season
    st.session_state.project = proj
